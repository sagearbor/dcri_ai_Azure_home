name: Update Hub Projects from projects.yml

on:
  push:
    branches:
      - main
    paths:
      - 'projects.yml' # The single trigger file
  workflow_dispatch:

jobs:
  build-project-list:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Build projects.json from projects.yml
        id: build
        run: |
          # Create projects.json with proper array structure for the frontend
          echo "Building projects.json from projects.yml..."
          
          # Initialize the JSON array
          echo "[]" > projects.json
          
          # Process each project entry - get the count first
          PROJECT_COUNT=$(yq eval 'length' projects.yml)
          echo "Found $PROJECT_COUNT projects to process"
          
          # Process each project by index to avoid JSON parsing issues
          for i in $(seq 0 $((PROJECT_COUNT-1))); do
            project_entry=$(yq eval -o=json ".[$i]" projects.yml)
            # Extract the repo URL and overrides
            repo_url=$(echo "$project_entry" | jq -r '.repo')
            overrides=$(echo "$project_entry" | jq '.overrides // {}')
            
            echo "Processing repository: $repo_url"
            repo_path=$(echo "$repo_url" | sed 's|https://github.com/||')
            meta_url="https://raw.githubusercontent.com/${repo_path}/main/project-meta.json"
            
            # Fetch the base metadata from the project repo
            echo "Fetching metadata from: $meta_url"
            base_metadata=$(curl -sfL "$meta_url" || echo '{}')
            
            if [[ "$base_metadata" == "{}" ]] || [[ -z "$base_metadata" ]]; then
              echo "WARNING: No project-meta.json found for $repo_url. Using fallback metadata."
              repo_name=$(basename "$repo_url")
              base_metadata="{\"name\":\"$repo_name\",\"description\":\"Project repository\",\"technologies\":[\"unknown\"],\"category\":\"other\",\"status\":\"active\",\"language\":\"unknown\"}"
            fi
            
            # Transform metadata to match frontend expectations and add hosted URL logic
            frontend_ready=$(echo "$base_metadata" | jq --argjson overrides "$overrides" --arg repo_url "$repo_url" '
            {
              title: (.name // "Unknown Project"),
              description: (.description // "No description available"),
              icon: (.icon // "bi-box-seam"),
              url: (if .hosted_url then .hosted_url else $repo_url end),
              status: (.status // "active"),
              tags: {
                technology: (.technologies // ["unknown"]),
                category: [(.category // "other")],
                language: [(.language // "unknown")]
              }
            } + $overrides')
            
            echo "Generated frontend data: $frontend_ready"
            
            # Add to the projects array
            jq --argjson new_project "$frontend_ready" '. += [$new_project]' projects.json > temp.json && mv temp.json projects.json
            
          done
          
          echo "--- Generated projects.json ---"
          cat projects.json | jq .
          echo "------------------------------"

      - name: Commit and Push if Changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          echo "=== Git status ==="
          git status
          
          echo "=== projects.json content ==="
          if [ -f "projects.json" ]; then
            echo "File exists:"
            cat projects.json
            echo "=== Git diff ==="
            git diff projects.json || echo "No diff (new file)"
          else
            echo "projects.json file not found!"
            ls -la
          fi
          
          if [ -f "projects.json" ]; then
            git add projects.json
            if git diff --cached --quiet; then
              echo "No changes to commit."
            else
              echo "Changes detected. Committing..."
              git commit -m "Automated update of projects.json"
              git push
              echo "✅ Successfully updated projects.json"
            fi
          else
            echo "❌ projects.json was not created"
          fi